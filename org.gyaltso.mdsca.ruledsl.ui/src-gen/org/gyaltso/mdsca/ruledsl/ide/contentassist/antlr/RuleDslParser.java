/*
 * generated by Xtext 2.23.0
 */
package org.gyaltso.mdsca.ruledsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.gyaltso.mdsca.ruledsl.ide.contentassist.antlr.internal.InternalRuleDslParser;
import org.gyaltso.mdsca.ruledsl.services.RuleDslGrammarAccess;

public class RuleDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RuleDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RuleDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRulesFileAccess().getGroup(), "rule__RulesFile__Group__0");
			builder.put(grammarAccess.getTypeNameRuleAccess().getGroup(), "rule__TypeNameRule__Group__0");
			builder.put(grammarAccess.getMethodNameRuleAccess().getGroup(), "rule__MethodNameRule__Group__0");
			builder.put(grammarAccess.getMethodLengthRuleAccess().getGroup(), "rule__MethodLengthRule__Group__0");
			builder.put(grammarAccess.getMethodParamCountRuleAccess().getGroup(), "rule__MethodParamCountRule__Group__0");
			builder.put(grammarAccess.getRulesFileAccess().getMethodNameRuleAssignment_0(), "rule__RulesFile__MethodNameRuleAssignment_0");
			builder.put(grammarAccess.getRulesFileAccess().getMethdLengthRuleAssignment_1(), "rule__RulesFile__MethdLengthRuleAssignment_1");
			builder.put(grammarAccess.getRulesFileAccess().getMethodNoOfParamsRuleAssignment_2(), "rule__RulesFile__MethodNoOfParamsRuleAssignment_2");
			builder.put(grammarAccess.getRulesFileAccess().getTypeNameAssignment_3(), "rule__RulesFile__TypeNameAssignment_3");
			builder.put(grammarAccess.getTypeNameRuleAccess().getNameAssignment_1(), "rule__TypeNameRule__NameAssignment_1");
			builder.put(grammarAccess.getTypeNameRuleAccess().getFormatAssignment_4(), "rule__TypeNameRule__FormatAssignment_4");
			builder.put(grammarAccess.getTypeNameRuleAccess().getApplyToPublicAssignment_6(), "rule__TypeNameRule__ApplyToPublicAssignment_6");
			builder.put(grammarAccess.getTypeNameRuleAccess().getApplyToProtectedAssignment_8(), "rule__TypeNameRule__ApplyToProtectedAssignment_8");
			builder.put(grammarAccess.getTypeNameRuleAccess().getApplyToPackageAssignment_10(), "rule__TypeNameRule__ApplyToPackageAssignment_10");
			builder.put(grammarAccess.getTypeNameRuleAccess().getApplyToPrivateAssignment_12(), "rule__TypeNameRule__ApplyToPrivateAssignment_12");
			builder.put(grammarAccess.getMethodNameRuleAccess().getNameAssignment_1(), "rule__MethodNameRule__NameAssignment_1");
			builder.put(grammarAccess.getMethodNameRuleAccess().getFormatAssignment_4(), "rule__MethodNameRule__FormatAssignment_4");
			builder.put(grammarAccess.getMethodNameRuleAccess().getAllowClassNameAssignment_6(), "rule__MethodNameRule__AllowClassNameAssignment_6");
			builder.put(grammarAccess.getMethodNameRuleAccess().getApplyToPublicAssignment_8(), "rule__MethodNameRule__ApplyToPublicAssignment_8");
			builder.put(grammarAccess.getMethodNameRuleAccess().getApplyToProtectedAssignment_10(), "rule__MethodNameRule__ApplyToProtectedAssignment_10");
			builder.put(grammarAccess.getMethodNameRuleAccess().getApplyToPackageAssignment_12(), "rule__MethodNameRule__ApplyToPackageAssignment_12");
			builder.put(grammarAccess.getMethodNameRuleAccess().getApplyToPrivateAssignment_14(), "rule__MethodNameRule__ApplyToPrivateAssignment_14");
			builder.put(grammarAccess.getMethodLengthRuleAccess().getNameAssignment_1(), "rule__MethodLengthRule__NameAssignment_1");
			builder.put(grammarAccess.getMethodLengthRuleAccess().getMaxAssignment_4(), "rule__MethodLengthRule__MaxAssignment_4");
			builder.put(grammarAccess.getMethodLengthRuleAccess().getCountEmptyAssignment_6(), "rule__MethodLengthRule__CountEmptyAssignment_6");
			builder.put(grammarAccess.getMethodParamCountRuleAccess().getNameAssignment_1(), "rule__MethodParamCountRule__NameAssignment_1");
			builder.put(grammarAccess.getMethodParamCountRuleAccess().getMaxAssignment_4(), "rule__MethodParamCountRule__MaxAssignment_4");
			builder.put(grammarAccess.getMethodParamCountRuleAccess().getIgnoreOverriddenMethodsAssignment_6(), "rule__MethodParamCountRule__IgnoreOverriddenMethodsAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RuleDslGrammarAccess grammarAccess;

	@Override
	protected InternalRuleDslParser createParser() {
		InternalRuleDslParser result = new InternalRuleDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RuleDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RuleDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
