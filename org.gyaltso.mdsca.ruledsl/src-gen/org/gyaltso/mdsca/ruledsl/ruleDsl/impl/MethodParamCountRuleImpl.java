/**
 * generated by Xtext 2.23.0
 */
package org.gyaltso.mdsca.ruledsl.ruleDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.gyaltso.mdsca.ruledsl.ruleDsl.MethodParamCountRule;
import org.gyaltso.mdsca.ruledsl.ruleDsl.RuleDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method Param Count Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gyaltso.mdsca.ruledsl.ruleDsl.impl.MethodParamCountRuleImpl#getMax <em>Max</em>}</li>
 *   <li>{@link org.gyaltso.mdsca.ruledsl.ruleDsl.impl.MethodParamCountRuleImpl#isIgnoreOverriddenMethods <em>Ignore Overridden Methods</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodParamCountRuleImpl extends RuleImpl implements MethodParamCountRule
{
  /**
   * The default value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected static final int MAX_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMax() <em>Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax()
   * @generated
   * @ordered
   */
  protected int max = MAX_EDEFAULT;

  /**
   * The default value of the '{@link #isIgnoreOverriddenMethods() <em>Ignore Overridden Methods</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIgnoreOverriddenMethods()
   * @generated
   * @ordered
   */
  protected static final boolean IGNORE_OVERRIDDEN_METHODS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIgnoreOverriddenMethods() <em>Ignore Overridden Methods</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIgnoreOverriddenMethods()
   * @generated
   * @ordered
   */
  protected boolean ignoreOverriddenMethods = IGNORE_OVERRIDDEN_METHODS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodParamCountRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RuleDslPackage.Literals.METHOD_PARAM_COUNT_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMax()
  {
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax(int newMax)
  {
    int oldMax = max;
    max = newMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.METHOD_PARAM_COUNT_RULE__MAX, oldMax, max));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIgnoreOverriddenMethods()
  {
    return ignoreOverriddenMethods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnoreOverriddenMethods(boolean newIgnoreOverriddenMethods)
  {
    boolean oldIgnoreOverriddenMethods = ignoreOverriddenMethods;
    ignoreOverriddenMethods = newIgnoreOverriddenMethods;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.METHOD_PARAM_COUNT_RULE__IGNORE_OVERRIDDEN_METHODS, oldIgnoreOverriddenMethods, ignoreOverriddenMethods));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__MAX:
        return getMax();
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__IGNORE_OVERRIDDEN_METHODS:
        return isIgnoreOverriddenMethods();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__MAX:
        setMax((Integer)newValue);
        return;
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__IGNORE_OVERRIDDEN_METHODS:
        setIgnoreOverriddenMethods((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__MAX:
        setMax(MAX_EDEFAULT);
        return;
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__IGNORE_OVERRIDDEN_METHODS:
        setIgnoreOverriddenMethods(IGNORE_OVERRIDDEN_METHODS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__MAX:
        return max != MAX_EDEFAULT;
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE__IGNORE_OVERRIDDEN_METHODS:
        return ignoreOverriddenMethods != IGNORE_OVERRIDDEN_METHODS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (max: ");
    result.append(max);
    result.append(", ignoreOverriddenMethods: ");
    result.append(ignoreOverriddenMethods);
    result.append(')');
    return result.toString();
  }

} //MethodParamCountRuleImpl
