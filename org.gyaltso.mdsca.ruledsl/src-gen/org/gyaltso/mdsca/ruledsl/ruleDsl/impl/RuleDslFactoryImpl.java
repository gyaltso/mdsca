/**
 * generated by Xtext 2.23.0
 */
package org.gyaltso.mdsca.ruledsl.ruleDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.gyaltso.mdsca.ruledsl.ruleDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RuleDslFactoryImpl extends EFactoryImpl implements RuleDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RuleDslFactory init()
  {
    try
    {
      RuleDslFactory theRuleDslFactory = (RuleDslFactory)EPackage.Registry.INSTANCE.getEFactory(RuleDslPackage.eNS_URI);
      if (theRuleDslFactory != null)
      {
        return theRuleDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RuleDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RuleDslPackage.RULES_FILE: return createRulesFile();
      case RuleDslPackage.RULE: return createRule();
      case RuleDslPackage.TYPE_NAME_RULE: return createTypeNameRule();
      case RuleDslPackage.METHOD_NAME_RULE: return createMethodNameRule();
      case RuleDslPackage.METHOD_LENGTH_RULE: return createMethodLengthRule();
      case RuleDslPackage.METHOD_PARAM_COUNT_RULE: return createMethodParamCountRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RulesFile createRulesFile()
  {
    RulesFileImpl rulesFile = new RulesFileImpl();
    return rulesFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeNameRule createTypeNameRule()
  {
    TypeNameRuleImpl typeNameRule = new TypeNameRuleImpl();
    return typeNameRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodNameRule createMethodNameRule()
  {
    MethodNameRuleImpl methodNameRule = new MethodNameRuleImpl();
    return methodNameRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodLengthRule createMethodLengthRule()
  {
    MethodLengthRuleImpl methodLengthRule = new MethodLengthRuleImpl();
    return methodLengthRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodParamCountRule createMethodParamCountRule()
  {
    MethodParamCountRuleImpl methodParamCountRule = new MethodParamCountRuleImpl();
    return methodParamCountRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleDslPackage getRuleDslPackage()
  {
    return (RuleDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RuleDslPackage getPackage()
  {
    return RuleDslPackage.eINSTANCE;
  }

} //RuleDslFactoryImpl
